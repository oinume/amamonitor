version: 2.1

env: &env
  GOOGLE_CLOUD_SDK_VERSION: 258.0.0
  GOOGLE_CLOUD_SDK_DOWNLOAD_PATH: /google-cloud-sdk

executors:
  go-linter:
    docker:
      - image: golang:1.14-buster
        environment:
          <<: *env
          GO111MODULE: "on"
          GOPATH: "/go"

  go-mysql:
    docker:
      - image: golang:1.14-buster
        environment:
          <<: *env
          AMAMONITOR_ENV: "test"
          ENABLE_TRACE: "false"
          GO111MODULE: "on"
          GOPATH: "/go"
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: "root"
          MYSQL_PASSWORD: "amamonitor"
          MYSQL_HOST: "127.0.0.1"
          MYSQL_PORT: "3306"
          MYSQL_DATABASE: "amamonitor_test"
          VERSION_HASH: "_version_"
          NODE_ENV: "test"
      - image: circleci/mysql:8.0
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD=true
        command: "--secure-file-priv=NULL --default-authentication-plugin=mysql_native_password"

gitconfig: &gitconfig
  name: "Set .gitconfig"
  command: |
    echo "" > ~/.gitconfig
    git config --global url."https://github.com".insteadOf git://github.com
    git config --global http.https://gopkg.in.followRedirects true

commands:
  checkout-and-gitconfig:
    steps:
      - checkout
      - run:
          name: "Set .gitconfig"
          command: |
            echo "" > ~/.gitconfig
            git config --global url."https://github.com".insteadOf git://github.com
            git config --global http.https://gopkg.in.followRedirects true
  save-cache-go-mod:
    parameters:
      cache-key:
        type: string
        default: "v7"
    steps:
      - save_cache:
          key: << parameters.cache-key >>-go-mod-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
  restore-cache-go-mod:
    parameters:
      cache-key:
        type: string
        default: "v7"
    steps:
      - restore_cache:
          keys:
            - << parameters.cache-key >>-go-mod-{{ checksum "go.sum" }}
  save-cache-tools-go-mod:
    parameters:
      cache-key:
        type: string
        default: "v7"
    steps:
      - save_cache:
          key: << parameters.cache-key >>-tools-go-mod-{{ checksum "tools/go.sum" }}
          paths:
            - /go/bin
            - /go/pkg/mod
  restore-cache-tools-go-mod:
    parameters:
      cache-key:
        type: string
        default: "v7"
    steps:
      - restore_cache:
          keys:
            - << parameters.cache-key >>-tools-go-mod-{{ checksum "tools/go.sum" }}

#node_modules_cache_key: &node_modules_cache_key
#  key: node_modules-{{ checksum ".circleci/cache_version.txt" }}-{{ checksum "package.json" }}

#install_npm_packages: &install_npm_packages
#  name: "Install npm packages"
#  command: |
#    if [ ! -e "/go/src/github.com/oinume/lekcije/node_modules" ]; then
#      set -eu
#      npm install
#    fi

jobs:
  backend-lint:
    environment:
      <<: *env
    working_directory: /go/src/github.com/oinume/amamonitor
    executor: go-linter
    steps:
      - checkout-and-gitconfig
      - restore-cache-tools-go-mod
      - run:
          name: "Install golangci-lint"
          command: |
            if [ ! -e "/go/bin/golangci-lint" ]; then
              make install-tools
            fi
      - run:
          name: "Run go/lint"
          command: make go/lint
      - save-cache-tools-go-mod

  backend-test:
    environment:
      <<: *env
    working_directory: /go/src/github.com/oinume/amamonitor
    executor: go-mysql
    steps:
      - checkout-and-gitconfig
      - restore-cache-go-mod
      - run:
          name: "Build"
          command: make build
      - save-cache-go-mod
      - run:
          name: "Install mysql-client"
          command: |
            set -eu
            apt-get update -qq
            apt-get install -y default-mysql-client net-tools
      - run:
          name: "Wait MySQL is up"
          command: |
            set -u
            timeout 10 bash -c "while ! mysqladmin ping -u ${MYSQL_USER} -h ${MYSQL_HOST} --silent; do sleep 0.5; done"
      - run:
          name: "Setup database"
          command: |
            set -eu
            mysql -u${MYSQL_USER} -h ${MYSQL_HOST} < ./db/docker-entrypoint-initdb.d/create_database.sql
      - restore-cache-tools-go-mod
      - run:
          name: "Install tools"
          command: |
            ls -l /go/bin/
            if [ ! -e "/go/bin/goose" ]; then
              make install-tools
            fi
      - run:
          name: "Apply database migrations"
          command: |
            export MYSQL_USER=amamonitor
            make test/db/goose/up
      - run:
          name: "Run go/test"
          command: |
            export MYSQL_USER=amamonitor
            make go/test GO_TEST="go test -v -race -coverprofile=coverage.txt -covermode=atomic"
      - save-cache-go-mod
      - save-cache-tools-go-mod
      - run:
          name: "Upload to codecov"
          command: |
            bash <(curl -s https://codecov.io/bash)

# FYI: https://github.com/oinume/blog-lampetty-net-redirector/blob/master/.circleci/config.yml
  deploy-backend:
    environment:
      <<: *env
    working_directory: /go/src/github.com/oinume/amamonitor
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: false
      - run:
          <<: *gitconfig
      - run:
          name: Install dependency apk packages
          command: |
            apk --no-cache add \
              bash \
              curl \
              curl-dev \
              make \
              python
      - restore_cache:
          key: google-cloud-sdk-258.0.0
      - run:
          name: "Install google-cloud-sdk"
          command: |
            ./ci/install-google-cloud-sdk.sh 258.0.0 /google-cloud-sdk
      - save_cache:
          key: google-cloud-sdk-258.0.0
          paths:
            - /google-cloud-sdk
      - run:
          name: "Activate GCP service account"
          command: |
            echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > ./gcp-service-account-key.json
            gcloud auth activate-service-account --key-file ./gcp-service-account-key.json
      - run:
          name: "Deploy Docker image to GCR and Cloud Run"
          command: |
            COMMIT=$(git describe --always --tag)
            IMAGE_TAG=$(echo "${CIRCLE_BRANCH}" | tr '._/' '-' | tr '[:upper:]' '[:lower:]')-"${COMMIT}"
            echo ${IMAGE_TAG}
            make gcloud/builds IMAGE_TAG=${IMAGE_TAG}
            if [ $CIRCLE_BRANCH = "master" ]; then
              gcloud components install beta
              gcloud beta run deploy server --project=${GCP_PROJECT_ID} --image=asia.gcr.io/${GCP_PROJECT_ID}/server:${IMAGE_TAG} --region=asia-northeast1 --platform=managed
            fi

workflows:
  version: 2
  build-workflow:
    jobs:
      - backend-lint:
          filters:
            branches:
              only: /.*/
      - backend-test:
          filters:
            branches:
              only: /.*/
      - deploy-backend:
          requires:
            - backend-lint
            - backend-test
          filters:
            branches:
              only:
                - master
                - /public-.*/
#      - frontend:
#          filters:
#            branches:
#              only: /.*/
#      - deploy-frontend:
#          requires:
#            - frontend
#          filters:
#            branches:
#              only:
#                - master
#                - /public-.*/
